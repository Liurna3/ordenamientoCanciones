                    _______________________________

                     DOCUMENTACION DE LINKEDLIST.H

                       Luis Eduardo Galindo Amaya
                    _______________________________


                               2023-02-25


Table of Contents
_________________

1. Importante
2. Estructura de LinkedList
3. Crear una lista: initLinkedList
4. Validar si la lista esta vacía: LinkedListEmpty
5. Añadir elementos a la lista
.. 1. Crear un nuevo nodo: createLinkedListNode
.. 2. Añadir el nodo al inicio
..... 1. Forma larga: linkedListInsert
..... 2. Forma corta: linkedListInsertLast
.. 3. Añadir un nodo en cualquier posición con: linkedListInsert
..... 1. Ejemplos
.. 4. Añadir nodo al final
..... 1. con linkedListInsert
..... 2. con linkedListInsertLast
6. Tamaño de la lista linkedListLenght
7. Extraer Nodo de la lista
.. 1. IMPORTANTE
.. 2. Obtener un nodo de la lista LinkedListGet
8. Cambiar el valor de un nodo
.. 1. Reemplazar el nodo LinkedListSet
9. Eliminar elementos de la lista
.. 1. IMPORTANTE
.. 2. Eliminar elementos linkedListRemove
.. 3. Eliminar el ultimo elemento de la lista LinkedListRemoveLast
10. Liberar la memoria de la lista





1 Importante
============

  Cada metodo que manipule un `linkedList' pasa como primer parametro la
  direccion a la lista (`&' al inicio), ejemplo:

  ,----
  | LinkedList lista;
  | linkedListInit(&lista);         /* Aquí */
  | 
  | linkedListInsert(&lista, node, 0); /* Aquí */
  | 
  | if (linkedListEmpty(&list)) { /* y Aquí */
  |   /* Bla bla... */
  | }
  `----

  Justificación
        Esto se hace para mantener la consistencia entre métodos y no
        estar recordando cual se pasa como parámetro y cual otro como
        referencia.


2 Estructura de LinkedList
==========================

  La estructura de LinkedList tiene dos parametros, la direccion al
  primer nodo (nodes) y el numero de nodos en la lista (size).

  ,----
  | struct LinkedList {
  |   struct LinkedListNode *nodes;
  |   int size;
  | };
  `----

  IMPORTANTE
        el valor de size siempre es uno más que la posicion mas alta
        utilizada, por ejemplo si quisieramos sacar el ultimo elemento
        de la lista con LinkedListGet tendriamos que usar size-1:

  +------------+------+--------------------------+
  | Lista      | size | Posición del ultimo nodo |
  +------------+------+--------------------------+
  | []         |    0 |                    ERROR |
  | [1]        |    1 |                        0 |
  | [1,2,3]    |    3 |                        2 |
  | [4,51,6,7] |    4 |                        3 |
  +------------+------+--------------------------+


3 Crear una lista: initLinkedList
=================================

  La función `initLinkedList' coloca el primer nodo de la lista en
  `NULL' y la longitud de la lista en `0', esto es importante porque no
  podemos saber que valores hay antes y podríamos referenciar memoria
  que no esta disponible.

  ,----
  | LinkedList lista;
  | linkedListInit(&lista);
  `----


4 Validar si la lista esta vacía: LinkedListEmpty
=================================================

  `LinkedListEmpty' retorna `1' *sí la lista esta vacía* y `0' *sí tiene
  algún elemento*.

  ,----
  | if (linkedListEmpty(&list)) {
  |   /* Tu código */
  | }
  `----


5 Añadir elementos a la lista
=============================

5.1 Crear un nuevo nodo: createLinkedListNode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Para que sea mas fácil de modificar los contenidos de la lista
  `LinkedList' no se encarga de crear los nodos directamente si no que
  un método aparte crea el nodo `LinkedListNode' y pasa la dirección a
  la lista:

  ,----
  | /* retorna una direccion de memoria */
  | LinkedListNode *nodo = createLinkedListNode(13);
  `----

  Si quisieramos modificar que contiene cada nodo solo terndiamos que
  modificar el metodo `createLinkedListnode' y la estructura de
  `LinkedListNode'.


5.2 Añadir el nodo al inicio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.2.1 Forma larga: linkedListInsert
-----------------------------------

  para insertar un elemento en la ultima posicion no es necesario restar
  `1' a el numero de elementos, la funcion

  ,----
  | /* inicializar la lista */
  | LinkedList lista;
  | linkedListInit(&lista);
  | 
  | /* crar el nodo */
  | LinkedListNode *nodo = createLinkedListNode(13);
  | 
  | linkedListInsert(&lista, nodo, 0); /* posición 0 */
  `----


5.2.2 Forma corta: linkedListInsertLast
---------------------------------------

  Como la lista esta vacía el ultimo, que al mismo tiempo el primero,
  elemento podemos insertar rápidamente el primer elemento con el método
  insert last

  ,----
  | /* inicializar la lista */
  | LinkedList lista;
  | linkedListInit(&lista);
  | 
  | /* crear el nodo */
  | LinkedListNode *nodo = createLinkedListNode(13);
  | 
  | /* Insertar el nodo */
  | linkedListInsertLast(&list, nodo);
  `----


5.3 Añadir un nodo en cualquier posición con: linkedListInsert
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | int posicion = 0;
  | linkedListInsert(&lista, nodo, posicion); /* posición 0 */
  `----


5.3.1 Ejemplos
--------------

  ------------------------------------------+-------------+
   LinkedList  Lenght  valor nodo  Posicion | Resultado   |
  ------------------------------------------+-------------+
   [A,B,C]          3  D                  2 | [A,B,D,C]   |
   [B,B,B,B]        4  A                  0 | [A,B,B,B,B] |
   [A,B,C]          3  D                  3 | [A,B,C,D]   |
   [A,B,C]          3  D                  4 | ERROR       |
  ------------------------------------------+-------------+


5.4 Añadir nodo al final
~~~~~~~~~~~~~~~~~~~~~~~~

5.4.1 con linkedListInsert
--------------------------

  ,----
  | linkedListInsert(&lista, nodo, linkedListLenght(&lista)); 
  `----


5.4.2 con linkedListInsertLast
------------------------------

  ,----
  | linkedListInsertLast(&lista, nodo); 
  `----


6 Tamaño de la lista linkedListLenght
=====================================

  ,----
  | int size = linkedListLenght(&list);
  `----


7 Extraer Nodo de la lista
==========================

7.1 IMPORTANTE
~~~~~~~~~~~~~~

  `LinkedList' solo se encarga de gestionar los nodos por lo tanto los
  metodos para obtener informacion de ellos solo retornan la direccion
  del nodo y queda a consideracion del programador que hacer con ellos.

  *NO* se recomienda manipular la variable `next' dentro del nodo o
   liberar la memoria correspondiente a un nodo dentro de la lista.


7.2 Obtener un nodo de la lista LinkedListGet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Tomando en cuenta el punto anterior debemos tener un espacio para
  almacenar la direccion de nuestro nodo:

  ,----
  | linkedListInsert(&lista,createLinkedListNode(10),0);
  | linkedListInsert(&lista,createLinkedListNode(13),1);
  | /* lista = [10, 13] */
  | 
  | /* puntero a el elemento 0 de la lista */
  | LinkedListNode *nodo = linkedListGet(&lista, 0); 
  | 
  | printf("%d\n", nodo->data);     /* 13 */
  `----
  Listing 1: Obtener un valor de la lista

  ,----
  | linkedListInsert(&lista,createLinkedListNode(10),0);
  | linkedListInsert(&lista,createLinkedListNode(13),1);
  | 
  | for(int i=0;i < linkedListLenght(&lista); i++){
  |   /* iterar la lista y obtener valore */
  |   LinkedListNode *nodo = linkedListGet(&lista,i);
  |   printf("%d\n", nodo->data); 
  |  }
  `----
  Listing 2: Iterar la lista


8 Cambiar el valor de un nodo
=============================

8.1 Reemplazar el nodo LinkedListSet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | LinkedList *nodo_viejo = createlinkedlistnode(10);
  | linkedListInsertLast(&lista,nodo_viejo); /* agregar un nodo a la lista */
  | 
  | LinkedListNode *nodo_nuevo = createLinkedListNode(3);
  | linkedListSet(&lista,nodo,0);   /* cambiar el valor del primer nodo */
  | 
  | printf("%d\n", linkedListGet(&list, 0)); /* -> 3 */
  `----


9 Eliminar elementos de la lista
================================

9.1 IMPORTANTE
~~~~~~~~~~~~~~

  Para eliminar un elemento con `LinkedList' el nodo debe existir, si el
  nodo NO existe el programa se detendra y lanzara un mensaje de error:

  +---------+----------+-----------+
  | Lista   | Posicion | Resultado |
  +---------+----------+-----------+
  | []      |        0 | ERROR     |
  | [A]     |        1 | ERROR     |
  | [A]     |        0 | []        |
  | [A,B,C] |        1 | [A,C]     |
  | [A,B,C] |        2 | [A,B]     |
  | [A,B,C] |        3 | ERROR     |
  +---------+----------+-----------+


9.2 Eliminar elementos linkedListRemove
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | LinkedList lista;
  | linkedListInit(&lista);
  | 
  | linkedListInsert(&lista,createLinkedListNode(10),0);
  | linkedListRemove(&lista,0);
  `----


9.3 Eliminar el ultimo elemento de la lista LinkedListRemoveLast
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | LinkedList lista;
  | linkedListInit(&lista);
  | 
  | linkedListInsert(&lista,createLinkedListNode(10),0);
  | 
  | linkedListRemoveLast(&lista);
  `----


10 Liberar la memoria de la lista
=================================

  ,----
  | linkedListFree(&lista);
  `----
